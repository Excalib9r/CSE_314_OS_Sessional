diff --git a/Makefile b/Makefile
index 39a99d7..75cd98d 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_dummyProc\
+	$U/_testProcInfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +155,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..af50145 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            boosting(void);
+void            updateProcess(void);
+void            updateProcessinfo(struct pstat *str);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..eab09ab 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,8 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+
+#define TIME_LIMIT_1 1   // 
+#define TIME_LIMIT_2 2 // 
+#define BOOST_INTERVAL 64 // 
+#define DEFAULT_TICKET_COUNT 10 //
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..b6f52ef 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,7 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -124,6 +125,12 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->total_span = 0;
+  p->queue_no = 1;
+  p->used_span = 0;
+  p->ticket_count = DEFAULT_TICKET_COUNT;
+  p->stated_span = 0;
+  p->current_count = DEFAULT_TICKET_COUNT;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -163,11 +170,17 @@ freeproc(struct proc *p)
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
+  p->queue_no = 0;
   p->parent = 0;
   p->name[0] = 0;
   p->chan = 0;
+  p->stated_span = 0;
   p->killed = 0;
   p->xstate = 0;
+  p->total_span = 0;
+  p->current_count = 0;
+  p->used_span = 0;
+  p->ticket_count = 0;
   p->state = UNUSED;
 }
 
@@ -319,6 +332,8 @@ fork(void)
   release(&wait_lock);
 
   acquire(&np->lock);
+  np->current_count = p->ticket_count;
+  np->ticket_count = p->ticket_count;
   np->state = RUNNABLE;
   release(&np->lock);
 
@@ -434,6 +449,120 @@ wait(uint64 addr)
   }
 }
 
+
+
+// copying value
+void updateProcessinfo(struct pstat *str){
+  struct proc *p;
+  int i = 0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state == UNUSED){
+      str->inuse[i] = 0;
+    }
+    else{
+      str->inuse[i] = 1;
+    }
+    str->inQ[i] = p->queue_no;
+    str->pid[i] = p->pid;
+    str->time_slices[i] = p->total_span; 
+    str->tickets_current[i] = p->current_count;
+    str->tickets_original[i] = p->ticket_count;
+    i++;
+    release(&p->lock);
+  }
+}
+
+
+// min ticket
+int ticketMax(int a, int b){
+  if(a > b){
+    return a;
+  }
+  return b;
+}
+
+// update processs info
+void updateProcess(void){
+   struct proc *p;
+   for(p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if(p->state == RUNNING){
+        if(p->queue_no == 1){
+          p->total_span++;
+          p->current_count = ticketMax(0, p->current_count - 1);
+          p->used_span++;
+        }
+      }
+      release(&p->lock);
+   }
+}
+
+
+// Boosting 
+void
+boosting(){
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state == RUNNABLE || p->state == RUNNING){
+      if(p->queue_no == 2){
+        p->queue_no = 1;
+      }
+    }
+    release(&p->lock);
+  }
+}
+
+
+// helper for ticket scheduling
+
+int
+totaltickets(){
+  struct proc *p;
+  int total = 0;
+  int flag = 0;
+  for(p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if(p->state == RUNNABLE) {
+        if(p->queue_no == 1){
+          flag = -1;
+          total = total + p->current_count;
+        }
+      }
+      release(&p->lock);
+  }
+  if(flag == 0){
+    return -1;
+  }
+  else{
+    return total;
+  }
+}
+
+// reset tickets
+void
+resetTicket(){
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if(p->state == RUNNABLE) {
+          p->current_count = p->ticket_count;
+      }
+      release(&p->lock);
+  }
+}
+
+// random int
+uint32 randHelper = 777;
+
+char myRand()
+{
+   randHelper = randHelper* 1664525 + 1013904223;
+   return randHelper >> 16;
+}
+
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -441,6 +570,7 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
+
 void
 scheduler(void)
 {
@@ -451,25 +581,103 @@ scheduler(void)
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
-
-    for(p = proc; p < &proc[NPROC]; p++) {
-      acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
-        c->proc = 0;
+    int total = totaltickets();
+    if(total == 0){
+      resetTicket();
+      total = totaltickets();
+    }
+    int flag;
+
+    if(total > 0){
+      int counter = 0;
+      int rand = myRand()%(total);
+      rand += 1;
+      flag = 0;
+      for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if(p->state == RUNNABLE && p->queue_no == 1) {
+          counter += p->current_count;
+          if(counter >= rand){
+            p->used_span = 0;
+            p->state = RUNNING;
+            p->stated_span = TIME_LIMIT_1;
+            flag = 1;
+            c->proc = p;
+            swtch(&c->context, &p->context);
+
+            // Process is done running for now.
+            // It should have changed its p->state before coming back.
+            c->proc = 0;
+            if(p->used_span >= p->stated_span && p->state == RUNNABLE){
+              p->queue_no = 2;
+            }
+          }
+        }
+        release(&p->lock);
+        if(flag)
+          break;
       }
-      release(&p->lock);
     }
+    else{
+      for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if(p->state == RUNNABLE && p->queue_no == 2) {
+            p->used_span = 0;
+            p->state = RUNNING;
+            p->stated_span = TIME_LIMIT_2;
+            c->proc = p;
+            swtch(&c->context, &p->context);
+
+            // Process is done running for now.
+            // It should have changed its p->state before coming back.
+            c->proc = 0;
+            if(p->used_span < p->stated_span && p->state == SLEEPING){
+              p->queue_no = 1;
+            }
+
+            if(p->used_span >= p->stated_span && p->state == RUNNABLE){
+              p->queue_no = 2;
+            }
+        }
+        release(&p->lock);
+        if(totaltickets() > 0)
+          break;
+      }
+    }
+
   }
 }
+// original give scheduler
+
+// void
+// scheduler(void)
+// {
+//   struct proc *p;
+//   struct cpu *c = mycpu();
+  
+//   c->proc = 0;
+//   for(;;){
+//     // Avoid deadlock by ensuring that devices can interrupt.
+//     intr_on();
+
+//     for(p = proc; p < &proc[NPROC]; p++) {
+//       acquire(&p->lock);
+//       if(p->state == RUNNABLE) {
+//         // Switch to chosen process.  It is the process's job
+//         // to release its lock and then reacquire it
+//         // before jumping back to us.
+//         p->state = RUNNING;
+//         c->proc = p;
+//         swtch(&c->context, &p->context);
+
+//         // Process is done running for now.
+//         // It should have changed its p->state before coming back.
+//         c->proc = 0;
+//       }
+//       release(&p->lock);
+//     }
+//   }
+// }
 
 // Switch to scheduler.  Must hold only p->lock
 // and have changed proc->state. Saves and restores
@@ -504,6 +712,10 @@ yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
+  if(p->stated_span > p->used_span){
+    release(&p->lock);
+    return;
+  }
   p->state = RUNNABLE;
   sched();
   release(&p->lock);
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..75f8d7c 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -92,6 +92,14 @@ struct proc {
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
 
+  // extra added variables
+  int queue_no;
+  int ticket_count;
+  int current_count;
+  int stated_span;
+  int used_span;
+  int total_span;
+
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..713ce28
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,12 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+struct pstat {
+int pid[NPROC]; // the process ID of each process
+int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+int inQ[NPROC]; // which queue the process is currently in
+int tickets_original[NPROC]; // the number of tickets each process originally had
+int tickets_current[NPROC]; // the number of tickets each process currently has
+int time_slices[NPROC]; // the number of time slices each process has been scheduled
+};
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..cbfdb87 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]   sys_settickets,
+[SYS_getpinfo]   sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..bee1422 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets  22
+#define SYS_getpinfo  23
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..3ce7db7 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
 
 uint64
 sys_exit(void)
@@ -89,3 +90,32 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+// additional system calls
+uint64
+sys_settickets(void)
+{
+  int ticket;
+  argint(0, &ticket);
+  if(ticket > 0){
+    struct proc *p;
+    p = myproc();
+    p->ticket_count = ticket;
+    return 1;
+  }
+  else{
+    return -1;
+  }
+}
+
+uint64
+sys_getpinfo(void)
+{
+  uint64 structaddr;
+  argaddr(0, &structaddr);
+  struct pstat str;
+  updateProcessinfo(&str);
+  copyout(myproc()->pagetable, structaddr, (char*)&str, sizeof(str));
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..b5147ce 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -8,7 +8,7 @@
 
 struct spinlock tickslock;
 uint ticks;
-
+uint boost;
 extern char trampoline[], uservec[], userret[];
 
 // in kernelvec.S, calls kerneltrap().
@@ -165,6 +165,12 @@ clockintr()
 {
   acquire(&tickslock);
   ticks++;
+  boost++;
+  updateProcess();
+  if(boost == BOOST_INTERVAL){
+    boosting();
+    boost = 0;
+  }
   wakeup(&ticks);
   release(&tickslock);
 }
diff --git a/user/dummyProc.c b/user/dummyProc.c
new file mode 100644
index 0000000..be46814
--- /dev/null
+++ b/user/dummyProc.c
@@ -0,0 +1,16 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/param.h"
+
+int main(int argc, char *argv[])
+{
+    int ticketCount = DEFAULT_TICKET_COUNT;
+    if(argc == 2){
+        ticketCount = atoi(argv[1]);
+    }
+    settickets(ticketCount);
+    fork();
+    while(1);
+    return 0;
+}
diff --git a/user/testProcInfo.c b/user/testProcInfo.c
new file mode 100644
index 0000000..4dd0409
--- /dev/null
+++ b/user/testProcInfo.c
@@ -0,0 +1,18 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+
+int main()
+{
+    struct pstat obj;
+    getpinfo(&obj);
+    int i;
+    printf("PID \t | \tIn Use \t | \tinQ \t| \tOriginal Tickets \t | \tCurrent Tickets \t | \tTime Slices\n");
+    for(i = 0; i < NPROC; i++){
+        if(obj.inQ[i] == 1 || obj.inQ[i] == 2){
+            printf("%d \t | \t%d \t | \t%d \t | \t      %d \t | \t               %d \t | \t              %d\n", obj.pid[i], obj.inuse[i], obj.inQ[i], obj.tickets_original[i], obj.tickets_current[i], obj.time_slices[i]);
+        }
+    }
+    return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..64b8048 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..21930eb 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
\ No newline at end of file
