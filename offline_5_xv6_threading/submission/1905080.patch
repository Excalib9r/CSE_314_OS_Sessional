diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..5f2bc05
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,6 @@
+{
+    "files.associations": {
+        "fs.h": "c",
+        "defs.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..7c45397 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_thread\
+	$U/_prod_con\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..db868e1 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -82,9 +82,12 @@ void            panic(char*) __attribute__((noreturn));
 void            printfinit(void);
 
 // proc.c
+void            thread_sleep(uint64 lk);
+void            thread_wakeup(int tid);
 int             cpuid(void);
 void            exit(int);
 int             fork(void);
+int             create_thread(uint64, uint64, uint64);
 int             growproc(int);
 void            proc_mapstacks(pagetable_t);
 pagetable_t     proc_pagetable(struct proc *);
@@ -101,6 +104,7 @@ void            sched(void);
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
 int             wait(uint64);
+int             join_thread(int id);
 void            wakeup(void*);
 void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
@@ -156,6 +160,7 @@ void            uartputc_sync(int);
 int             uartgetc(void);
 
 // vm.c
+int             thread_release(pagetable_t pagetable, uint64 dstva);
 void            kvminit(void);
 void            kvminithart(void);
 void            kvmmap(pagetable_t, uint64, uint64, uint64, int);
@@ -165,6 +170,7 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64);
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
@@ -173,6 +179,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            freewalk(pagetable_t pagetable);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..4098e1d 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -6,6 +6,8 @@
 #include "proc.h"
 #include "defs.h"
 
+void thread_freepagetable(pagetable_t pagetable, uint64 sz);
+
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
@@ -124,6 +126,7 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->is_thread = 0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -158,8 +161,10 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
+  if(p->is_thread == 0 && p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
+  else if(p->pagetable)
+    thread_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
@@ -215,6 +220,16 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
   uvmfree(pagetable, sz);
 }
 
+void
+thread_freepagetable(pagetable_t pagetable, uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
+
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
@@ -274,7 +289,7 @@ growproc(int n)
   return 0;
 }
 
-// Create a new process, copying the parent.
+// Create a new protcess, copying the parent.
 // Sets up child kernel stack to return as if from fork() system call.
 int
 fork(void)
@@ -325,6 +340,64 @@ fork(void)
   return pid;
 }
 
+
+int
+create_thread(uint64 fcn, uint64 arg, uint64 stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+
+  // sp -= sp % 16; // riscv sp must be 16-byte aligned
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+  np->trapframe->epc = fcn;
+  np->trapframe->sp = stack + 4096;
+  np->trapframe->sp -= np->trapframe->sp % 16;
+  np->trapframe->a0 = arg;
+
+  // Cause fork to return 0 in the child.
+  // np->trapframe->a0 = 0;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  acquire(&np->lock);
+  np->is_thread = 1;
+  release(&np->lock);
+
+  return pid;
+}
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
 void
@@ -434,6 +507,52 @@ wait(uint64 addr)
   }
 }
 
+int
+join_thread(int id)
+{
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p &&  pp->pid == id){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          // if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+          //                         sizeof(pp->xstate)) < 0) {
+          //   release(&pp->lock);
+          //   release(&wait_lock);
+          //   return -1;
+          // }
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+    
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -561,6 +680,37 @@ sleep(void *chan, struct spinlock *lk)
   acquire(lk);
 }
 
+// Atomically release lock and sleep on chan.
+// Reacquires lock when awakened.
+void
+thread_sleep(uint64 lk)
+{
+  struct proc *p = myproc();
+  
+  // Must acquire p->lock in order to
+  // change p->state and then call sched.
+  // Once we hold p->lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup locks p->lock),
+  // so it's okay to release lk.
+
+  acquire(&p->lock);  //DOC: sleeplock1
+  thread_release(p->pagetable, lk);
+
+  // Go to sleep.
+  // p->chan = chan;
+  p->state = SLEEPING;
+
+  sched();
+
+  // Tidy up.
+  // p->chan = 0;
+
+  // Reacquire original lock.
+  release(&p->lock);
+  // acquire(lk);
+}
+
 // Wake up all processes sleeping on chan.
 // Must be called without any p->lock.
 void
@@ -579,6 +729,22 @@ wakeup(void *chan)
   }
 }
 
+void
+thread_wakeup(int tid)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p != myproc()){
+      acquire(&p->lock);
+      if(p->state == SLEEPING && p->pid == tid) {
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+    }
+  }
+}
+
 // Kill the process with the given pid.
 // The victim won't exit until it tries to return
 // to user space (see usertrap() in trap.c).
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..7085444 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int is_thread;
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..30ad99c 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,11 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_thread_set_sleep(void);
+extern uint64 sys_thread_set_wakeup(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +131,11 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create]   sys_thread_create,
+[SYS_thread_join]   sys_thread_join,
+[SYS_thread_exit]   sys_thread_exit,
+[SYS_thread_set_sleep]   sys_thread_set_sleep,
+[SYS_thread_set_wakeup]   sys_thread_set_wakeup,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..9a93a53 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create  22
+#define SYS_thread_join  23
+#define SYS_thread_exit  24
+#define SYS_thread_set_sleep  25
+#define SYS_thread_set_wakeup  26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..e84f6f5 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,53 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64
+sys_thread_create(void)
+{
+  uint64 fp;
+  uint64 ap;
+  uint64 sp;
+  // uint64 fap;
+  argaddr(0, &fp);
+  // argaddr(1, &fap);
+  argaddr(1, &ap);
+  argaddr(2, &sp);
+  int val = create_thread(fp, ap, sp);
+  return val;
+}
+
+uint64
+sys_thread_join(void)
+{
+  int id;
+  argint(0, &id);
+  int val = join_thread(id);
+  return val;
+}
+
+uint64
+sys_thread_exit(void)
+{
+  exit(0);
+  return 0;
+}
+
+uint64
+sys_thread_set_sleep(void)
+{
+  uint64 adr;
+  argaddr(0, &adr);
+  thread_sleep(adr);
+  return 0;
+}
+
+uint64
+sys_thread_set_wakeup(void)
+{
+  int tid;
+  argint(0, &tid);
+  thread_wakeup(tid);
+  return 0;
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..1e5a1e9 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -332,6 +332,36 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  // char *mem;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      // kfree(pa);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
@@ -370,6 +400,22 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   return 0;
 }
 
+// Copy from kernel to user.
+// Copy len bytes from src to virtual address dstva in a given page table.
+// Return 0 on success, -1 on error.
+int
+thread_release(pagetable_t pagetable, uint64 dstva)
+{
+  uint64 va0, pa0;
+    va0 = PGROUNDDOWN(dstva);
+    pa0 = walkaddr(pagetable, va0);
+    if(pa0 == 0)
+      return -1;
+    __sync_synchronize();
+    __sync_lock_release((uint8*)(pa0 + (dstva - va0)));
+  return 0;
+}
+
 // Copy from user to kernel.
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
diff --git a/user/lock.h b/user/lock.h
new file mode 100644
index 0000000..32d801d
--- /dev/null
+++ b/user/lock.h
@@ -0,0 +1,137 @@
+#ifndef SPIN_L
+#define SPIN_L
+
+// Mutual exclusion lock.
+struct myLock {
+  uint8 locked;       // Is the lock held?
+
+  // For debugging:
+  char *name;        // Name of lock.
+  int thread_id;   // The thread_id holding the lock.
+};
+
+// Mutual exclusion spin locks.
+
+int
+holding(struct myLock *lk)
+{
+  int r;
+  r = (lk->locked && lk->thread_id == getpid());
+  return r;
+}
+
+
+void
+thread_init_lock(struct myLock *lk, char *name)
+{
+  lk->name = name;
+  lk->locked = 0;
+  lk->thread_id = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+thread_spin_lock(struct myLock *lk)
+{
+//   push_off(); // disable interrupts to avoid deadlock.
+  if(holding(lk))
+    exit(0);
+
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  lk->thread_id = getpid();
+}
+
+void
+thread_mutex_lock(struct myLock *lk)
+{
+//   push_off(); // disable interrupts to avoid deadlock.
+  if(holding(lk))
+    exit(0);
+
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0){
+    sleep(1);
+  }
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  lk->thread_id = getpid();
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct myLock *lk)
+{
+  if(!holding(lk))
+    exit(0);
+
+  lk->thread_id = 0;
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+
+//   pop_off();
+}
+
+void
+thread_mutex_unlock(struct myLock *lk)
+{
+  if(!holding(lk))
+    exit(0);
+
+  lk->thread_id = 0;
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+}
+#endif
\ No newline at end of file
diff --git a/user/prod_con.c b/user/prod_con.c
new file mode 100644
index 0000000..f34be04
--- /dev/null
+++ b/user/prod_con.c
@@ -0,0 +1,197 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/lock.h"
+
+struct queue{
+	int arr[16];
+	int front;
+	int rear;
+	int size;
+};
+
+void inittialize_queue(struct queue* que)
+{
+	que->front = 0;
+	que->rear = 0;
+	que->size = 0;
+}
+
+void push(struct queue* que ,int x)
+{
+	que->arr[que->rear] = x;
+	que->rear = (que->rear+1)%16;
+	que->size++;
+}
+
+int top(struct queue* que)
+{
+	if(que->size == 0)
+		return -1;
+	return que->arr[que->front];
+}
+
+void pop(struct queue* que)
+{
+	if(que->size != 0){
+		que->front = (que->front+1)%16;
+		que->size--;
+	}
+}
+
+struct condVar{
+	struct queue que;
+	struct myLock lock;
+};
+
+void condV_init(struct condVar* cv, char* name){
+	thread_init_lock(&cv->lock, name);
+}
+
+void Wait (struct condVar *cv, struct myLock *mx) 
+{
+	thread_mutex_lock(&cv->lock);  /* protect the queue */
+	// cv->que.push(getpid()); /* enqueue */
+	push(&cv->que, getpid());
+	thread_mutex_unlock(&cv->lock); /* we're done with the list */
+
+	/* The suspend and release_mutex() operation should be atomic */
+	// release_mutex ((mx));
+	// thr_suspend (self);  /* Sleep 'til someone wakes us */
+	mx->thread_id = 0;
+	thread_set_sleep(&(mx->locked));
+	thread_mutex_lock(mx); /* Woke up -- our turn, get resource lock */
+	return;
+}
+
+void Signal(struct condVar *cv)
+{
+	int tid;
+	thread_mutex_lock(&cv->lock); /* protect the queue */
+	// tid = cv->que.top();
+	tid = top(&cv->que);
+	// cv->que.pop();
+	pop(&cv->que);
+	thread_mutex_unlock(&cv->lock);
+	if (tid>0)
+		thread_set_wakeup(tid);
+	return;
+}
+
+typedef struct __Zem_t {
+	int value;
+	struct condVar cond;
+	struct myLock lock;
+} Zem_t;
+
+// only one thread can call this
+void Zem_init(Zem_t *s, int value) {
+	s->value = value;
+	condV_init(&s->cond, "banana");
+	thread_init_lock(&s->lock, "orange");
+}
+
+
+void Zem_wait(Zem_t *s) {
+	thread_mutex_lock(&s->lock);
+	while (s->value <= 0)
+	Wait(&s->cond, &s->lock);
+	s->value--;
+	thread_mutex_unlock(&s->lock);
+}
+
+void Zem_post(Zem_t *s) {
+	thread_mutex_lock(&s->lock);
+	s->value++;
+	Signal(&s->cond);
+	thread_mutex_unlock(&s->lock);
+}
+
+struct queue q;
+// a mutex object lock 
+struct myLock mutex;
+// a semaphore object empty
+struct __Zem_t empty;
+// a semaphore object full
+struct __Zem_t full;
+
+void init_semaphore()
+{
+	// initialize mutex lock
+	thread_init_lock(&mutex, "mango");
+	// initialize semaphore empty with 5
+	Zem_init(&empty, 5);
+	// initialize semaphore full with 0
+	Zem_init(&full, 0);
+
+}
+
+void ProducerFunc(void * arg)
+{	
+	printf("%s\n",(char*)arg);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+		Zem_wait(&empty);
+
+		// wait for mutex lock
+		thread_mutex_lock(&mutex);
+		sleep(1);	
+		push(&q, i);
+		printf("producer produced item %d\n",i);
+		thread_mutex_unlock(&mutex);
+		// unlock mutex lock
+		Zem_post(&full);	
+		// post semaphore full
+	}
+	thread_exit();
+}
+
+void ConsumerFunc(void * arg)
+{
+	printf("%s\n",(char*)arg);
+	int i;
+	for(i=1;i<=10;i++)
+	{	
+		// wait for semphore full
+		Zem_wait(&full);
+		// wait for mutex lock
+ 		thread_mutex_lock(&mutex);
+			
+		sleep(1);
+		int item = top(&q);
+		pop(&q);
+		printf("consumer consumed item %d\n",item);	
+
+		thread_mutex_unlock(&mutex);
+		// unlock mutex lock
+		Zem_post(&empty);
+		// post semaphore empty		
+	}
+	thread_exit();
+}
+
+int main(void)
+{	
+	
+	init_semaphore();
+	
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+  	int thread1, thread2, r1, r2;
+
+  	s1 = malloc(4096);
+  	s2 = malloc(4096);
+
+  	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+  	thread2 = thread_create(ConsumerFunc, (void*)message2, s2); 
+
+  	r1 = thread_join(thread1);
+  	r2 = thread_join(thread2);	
+	printf("%d %d\n",r1, r2);
+	exit(0);
+}
\ No newline at end of file
diff --git a/user/thread.c b/user/thread.c
new file mode 100644
index 0000000..fa37167
--- /dev/null
+++ b/user/thread.c
@@ -0,0 +1,73 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/lock.h"
+
+struct myLock mlock;
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+void do_work(void *arg){
+    int i; 
+    int old;
+   
+    struct balance *b = (struct balance*) arg; 
+    printf( "Starting do_work: s:%s\n", b->name);
+
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+        //  thread_spin_lock(&lock);
+         thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	 // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         //thread_spin_unlock(&lock);
+         thread_mutex_unlock(&mlock);
+
+    }
+  
+    printf( "Done s:%x\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  thread_init_lock(&mlock, "far");
+ 
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..87039b7 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,11 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+void thread_exit(void);
+void thread_set_sleep(uint8*);
+void thread_set_wakeup(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..823a3d7 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("thread_set_sleep");
+entry("thread_set_wakeup");
\ No newline at end of file
